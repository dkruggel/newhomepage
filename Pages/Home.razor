@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<div class="app-container">
    <!-- Header with Hamburger Menu and Clock -->
    @* <header class="navbar">
        <div class="navbar-content">
            <div class="navbar-left">
                <button class="hamburger-btn" @onclick="ToggleMenu">
                    <span class="hamburger-line"></span>
                    <span class="hamburger-line"></span>
                    <span class="hamburger-line"></span>
                </button>
                <h1 class="navbar-title">My Dashboard</h1>
            </div>
            <div class="navbar-right">
                <div class="clock">@currentTime.ToString("HH:mm:ss")</div>
            </div>
        </div>
    </header> *@
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
        <div class="container-fluid navbar-content">
            <a class="navbar-brand" href="#">David Kruggel</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="#">Home</a>
                    </li>
                </ul>
                <div class="clock d-flex">@currentTime.ToString("hh:mm:ss tt")</div>
            </div>
        </div>
    </nav>

    <!-- Side Menu Overlay -->
    <div class="menu-overlay @(isMenuOpen ? "show" : "")" @onclick="CloseMenu"></div>
    
    <!-- Side Menu -->
    <nav class="side-menu @(isMenuOpen ? "open" : "")">
        <div class="menu-header">
            <h3>Menu</h3>
            <button class="close-btn" @onclick="CloseMenu">&times;</button>
        </div>
        <ul class="menu-items">
            <li><a href="/">Home</a></li>
            <li><a href="/weather">Weather</a></li>
            <li><a href="/calendar">Calendar</a></li>
            <li><a href="/settings">Settings</a></li>
        </ul>
    </nav>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Weather Card -->
        <div class="card weather-card">
            <div class="card-header">
                <h2>Weather</h2>
                <span class="location" @onclick="ChangeLocation">@weatherData?.Location.Name, @weatherData?.Location.Region</span>
            </div>
            <div class="card-body">
                @if(weatherData != null)
                    {
                    <div class="current-weather">
                        <div class="current-temp">@weatherData.Current.Temp_F°F</div>
                        <div class="current-desc">@weatherData.Current.Condition.Description</div>
                        <img src="@weatherData.Current.Condition.Icon"/>
                    </div>
                    <div class="forecast">
                        @foreach (var day in weatherData.Forecast.ForecastDays)
                        {
                            <div class="forecast-item">
                                <div class="day">@day.Date</div>
                                <div class="temp">@day.Day.Low°/@day.Day.High°</div>
                                <div class="desc">@day.Day.Condition.Description</div>
                                <img src="@day.Day.Condition.Icon"/>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="loading">Loading weather data...</div>
                }
            </div>
        </div>

        <!-- Countdown Card -->
        <div class="card countdown-card">
            <div class="card-header">
                <h2>Important Dates</h2>
            </div>
            <div class="card-body">
                @if (countdownEvents != null && countdownEvents.Any())
                {
                    @foreach (var eventItem in countdownEvents)
                    {
                        var daysUntil = (eventItem.Date - DateTime.Today).Days;
                        <div class="countdown-item @(daysUntil <= 7 ? "urgent" : "") @(eventItem.IsHoliday ? "holiday" : "")">
                            <div class="event-info">
                                <div class="event-name">@eventItem.Event</div>
                                <div class="event-date">@eventItem.Date.ToString("MMMM dd, yyyy")</div>
                            </div>
                            <div class="countdown-days">
                                @if (daysUntil > 0)
                                {
                                    <span class="days-number">@daysUntil</span>
                                    <span class="days-label">day@(daysUntil == 1 ? "" : "s")</span>
                                }
                                else if (daysUntil == 0)
                                {
                                    <span class="days-today">Today!</span>
                                }
                                else
                                {
                                    <span class="days-past">@Math.Abs(daysUntil) day@(Math.Abs(daysUntil) == 1 ? "" : "s") ago</span>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="loading">Loading events...</div>
                }
            </div>
        </div>
    </main>
</div>

@code {
    private bool isMenuOpen = false;
    private DateTime currentTime = DateTime.Now;
    private Timer? timer;
    private WeatherData? weatherData;
    private List<CountdownEvent>? countdownEvents;
    private bool isLoadingLocation = false;
    private string currentLocation = "";

    protected override async Task OnInitializedAsync()
    {
        // Start the clock timer
        timer = new Timer(UpdateTime, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        
        // Load data
        await LoadWeatherData();
        await LoadCountdownEvents();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try {
                // Inject JavaScript functions for geolocation
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.getUserLocation = () => {
                    return new Promise((resolve, reject) => {
                        if (!navigator.geolocation) {
                            reject('Geolocation is not supported');
                            return;
                        }
                        
                        navigator.geolocation.getCurrentPosition(
                            position => resolve({
                                latitude: position.coords.latitude,
                                longitude: position.coords.longitude
                            }),
                            error => reject(error.message),
                            { enableHighAccuracy: true, timeout: 10000, maximumAge: 300000 }
                        );
                    });
                };

                window.promptForLocation = (currentLocation) => {
                    const newLocation = prompt('Enter your location (city, state or city, country):', currentLocation || '');
                    return newLocation;
                };
            ");
            }
            catch (Exception) {
                GetUserLocation();
            }
        }
    }

    private void UpdateTime(object? state)
    {
        currentTime = DateTime.Now;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
    }

    private void CloseMenu()
    {
        isMenuOpen = false;
    }

    private async Task GetUserLocation()
    {
        try
        {
            isLoadingLocation = true;
            StateHasChanged();

            try
            {
                // Try to get GPS coordinates
                var location = await JSRuntime.InvokeAsync<LocationCoords>("getUserLocation");
                
                // Reverse geocode to get city name
                var geoResult = await Http.GetStringAsync($"https://api.bigdatacloud.net/data/reverse-geocode-client?latitude={location.Latitude}&longitude={location.Longitude}&localityLanguage=en");
                var geoData = JsonSerializer.Deserialize<GeocodeResult>(geoResult, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                
                if (geoData != null && !string.IsNullOrEmpty(geoData.City))
                {
                    currentLocation = $"{geoData.City}, {geoData.CountryCode}";
                }
                else
                {
                    currentLocation = $"{location.Latitude:F2}, {location.Longitude:F2}";
                }
            }
            catch
            {
                // If GPS fails, try IP-based location
                try
                {
                    var ipResult = await Http.GetStringAsync("https://ipapi.co/json/");
                    var ipData = JsonSerializer.Deserialize<IPLocationResult>(ipResult, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (ipData != null && !string.IsNullOrEmpty(ipData.City))
                    {
                        currentLocation = $"{ipData.City}, {ipData.CountryCode}";
                    }
                    else
                    {
                        currentLocation = "Location unavailable";
                    }
                }
                catch
                {
                    currentLocation = "O'Fallon, MO"; // Final fallback
                }
            }

            await LoadWeatherData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting location: {ex.Message}");
            currentLocation = "O'Fallon, MO"; // Fallback
            await LoadWeatherData();
        }
        finally
        {
            isLoadingLocation = false;
            StateHasChanged();
        }
    }

    private async Task ChangeLocation()
    {
        try
        {
            var newLocation = await JSRuntime.InvokeAsync<string>("promptForLocation", currentLocation);
            
            if (!string.IsNullOrWhiteSpace(newLocation) && newLocation != currentLocation)
            {
                isLoadingLocation = true;
                currentLocation = newLocation;
                StateHasChanged();
                
                await LoadWeatherData();
                
                isLoadingLocation = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error changing location: {ex.Message}");
            isLoadingLocation = false;
            StateHasChanged();
        }
    }

    private async Task LoadWeatherData()
    {
        try
        {
            var apiKey = "fd12d2e256514c648a204025252808";
            var forecastResponse = await Http.GetStringAsync($"https://api.weatherapi.com/v1/forecast.json?key={apiKey}&q={currentLocation}&days=5&aqi=no&alerts=no");
            weatherData = JsonSerializer.Deserialize<WeatherData>(forecastResponse);
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error - you might want to log this
            Console.WriteLine($"Error loading weather data: {ex.Message}");
        }
    }

    private async Task LoadCountdownEvents()
    {
        try
        {
            var allEvents = new List<CountdownEvent>();

            // Load personal events from JSON file
            try
            {
                var json = await Http.GetStringAsync("data/events.json");
                var personalEvents = JsonSerializer.Deserialize<List<CountdownEvent>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (personalEvents != null)
                {
                    allEvents.AddRange(personalEvents);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading personal events: {ex.Message}");
                
                // Add fallback personal events
                allEvents.AddRange(new List<CountdownEvent>
                {
                    new CountdownEvent { Event = "Birthday Party", Date = new DateTime(2025, 9, 15), IsHoliday = false },
                    new CountdownEvent { Event = "Project Deadline", Date = new DateTime(2025, 8, 30), IsHoliday = false }
                });
            }

            // Load holidays from API
            try
            {
                var currentYear = DateTime.Now.Year;
                var holidayJson = await Http.GetStringAsync($"https://date.nager.at/api/v3/publicholidays/{currentYear}/US");
                var holidays = JsonSerializer.Deserialize<List<HolidayData>>(holidayJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (holidays != null)
                {
                    // Convert holidays to CountdownEvent and filter to only future/recent holidays
                    var holidayEvents = holidays
                        .Where(h => h.Date >= DateTime.Today) // Include holidays from last 30 days >= DateTime.Today.AddDays(-30)
                        .Select(h => new CountdownEvent 
                        { 
                            Event = $"🎉 {h.Event}", 
                            Date = h.Date.Date, 
                            IsHoliday = true 
                        })
                        .ToList();

                    allEvents.AddRange(holidayEvents);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading holidays: {ex.Message}");
                
                // Add some fallback US holidays
                var fallbackHolidays = new List<CountdownEvent>
                {
                    new CountdownEvent { Event = "🎉 Christmas Day", Date = new DateTime(2025, 12, 25), IsHoliday = true },
                    new CountdownEvent { Event = "🎉 New Year's Day", Date = new DateTime(2026, 1, 1), IsHoliday = true },
                    new CountdownEvent { Event = "🎉 Independence Day", Date = new DateTime(2025, 7, 4), IsHoliday = true },
                    new CountdownEvent { Event = "🎉 Thanksgiving", Date = new DateTime(2025, 11, 27), IsHoliday = true }
                };
                
                allEvents.AddRange(fallbackHolidays.Where(h => h.Date >= DateTime.Today.AddDays(-30)));
            }
            
            // Sort by date and limit to reasonable number
            countdownEvents = allEvents
                .OrderBy(e => e.Date)
                .Take(12) // Limit to 12 events to avoid clutter
                .ToList();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Final fallback
            Console.WriteLine($"Error in LoadCountdownEvents: {ex.Message}");
            countdownEvents = new List<CountdownEvent>
            {
                new CountdownEvent { Event = "Sample Event", Date = DateTime.Today.AddDays(30), IsHoliday = false }
            };
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    // Data models
    public class WeatherData
    {
        [JsonPropertyName("location")]
        public Location Location { get; set; } = new();

        [JsonPropertyName("current")]
        public Current Current { get; set; } = new();

        [JsonPropertyName("forecast")]
        public Forecast Forecast { get; set; } = new();
    }

    public class Location
    {
        [JsonPropertyName("name")]
        public string Name { get; set; } = "";

        [JsonPropertyName("region")]
        public string Region { get; set; } = "";
    }

    public class Current {
        [JsonPropertyName("temp_f")]
        public double Temp_F { get; set; } = 0.0;

        [JsonPropertyName("condition")]
        public Condition Condition { get; set; } = new();
    }

    public class Forecast {
        [JsonPropertyName("forecastday")]
        public List<ForecastDay> ForecastDays { get; set; } = new();
    }

    public class Condition {
        [JsonPropertyName("text")]
        public string Description { get; set; } = "";

        [JsonPropertyName("icon")]
        public string Icon { get; set; } = "";
    }

    public class ForecastDay
    {
        [JsonPropertyName("date")]
        public string Date { get; set; } = "";

        [JsonPropertyName("day")]
        public Day Day { get; set; } = new();
    }

    public class Day {
        [JsonPropertyName("maxtemp_f")]
        public double High { get; set; }

        [JsonPropertyName("mintemp_f")]
        public double Low { get; set; }

        [JsonPropertyName("condition")]
        public Condition Condition { get; set; } = new();
    }

    public class CountdownEvent
    {
        public string Event { get; set; } = "";
        public DateTime Date { get; set; }
        public bool IsHoliday { get; set; } = false;
    }

    public class HolidayData
    {
        public DateTime Date { get; set; }
        public string LocalName { get; set; } = "";
        [JsonPropertyName("name")]
        public string Event { get; set; } = "";
        public string CountryCode { get; set; } = "";
        public bool Fixed { get; set; }
        public bool Global { get; set; }
    }

    public class LocationCoords
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    public class GeocodeResult
    {
        public string City { get; set; } = "";
        public string CountryCode { get; set; } = "";
        public string CountryName { get; set; } = "";
    }

    public class IPLocationResult
    {
        public string City { get; set; } = "";
        public string CountryCode { get; set; } = "";
        public string CountryName { get; set; } = "";
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}